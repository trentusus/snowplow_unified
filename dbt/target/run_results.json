{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.4", "generated_at": "2023-12-22T12:59:11.627679Z", "invocation_id": "9ded9410-3b01-48fc-bb97-282cd819f087", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-22T12:58:34.329303Z", "completed_at": "2023-12-22T12:58:34.359440Z"}, {"name": "execute", "started_at": "2023-12-22T12:58:34.360988Z", "completed_at": "2023-12-22T12:58:36.628301Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.3041391372680664, "adapter_response": {"_message": "MERGE (0.0 rows, 0 processed)", "code": "MERGE", "rows_affected": 0, "bytes_processed": 0, "bytes_billed": 0, "location": "europe-west2", "project_id": "com-snplow-sales-gcp", "job_id": "61243465-668f-4e8a-a164-38aee9179596", "slot_ms": 1521}, "message": "MERGE (0.0 rows, 0 processed)", "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_base_quarantined_sessions", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n        with prep as (\n        select\n            \n                cast(null as \n    string\n) session_identifier\n            \n        )\n\n        select *\n\n        from prep\n        where false\n\n    ", "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_base_quarantined_sessions`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-22T12:58:36.638230Z", "completed_at": "2023-12-22T12:58:36.657885Z"}, {"name": "execute", "started_at": "2023-12-22T12:58:36.659442Z", "completed_at": "2023-12-22T12:58:38.800036Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.1649179458618164, "adapter_response": {"_message": "MERGE (0.0 rows, 0 processed)", "code": "MERGE", "rows_affected": 0, "bytes_processed": 0, "bytes_billed": 0, "location": "europe-west2", "project_id": "com-snplow-sales-gcp", "job_id": "60466080-1eef-447d-8b98-c764330fce7f", "slot_ms": 1551}, "message": "MERGE (0.0 rows, 0 processed)", "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_incremental_manifest", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n        with prep as (\n        select\n            cast(null as \n    string\n) model,\n            cast('1970-01-01' as timestamp) as last_success\n        )\n\n        select *\n\n        from prep\n        where false\n    ", "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_incremental_manifest`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-22T12:58:38.807759Z", "completed_at": "2023-12-22T12:58:39.744168Z"}, {"name": "execute", "started_at": "2023-12-22T12:58:39.745940Z", "completed_at": "2023-12-22T12:58:42.486378Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.681591033935547, "adapter_response": {"_message": "CREATE TABLE (1.0 rows, 0 processed)", "code": "CREATE TABLE", "rows_affected": 1, "bytes_processed": 0, "bytes_billed": 0, "location": "europe-west2", "project_id": "com-snplow-sales-gcp", "job_id": "3e27c5e9-f513-44d9-a897-161bcf935fcb", "slot_ms": 279}, "message": "CREATE TABLE (1.0 rows, 0 processed)", "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_base_new_event_limits", "compiled": true, "compiled_code": "\n\n\n      select \n        cast('2023-12-22' as timestamp)\n     as lower_limit,\n              least(\n        cast('2023-12-22 12:55:06.094000+00:00' as timestamp)\n    ,\n              \n    timestamp_add(\n        cast('2023-12-22' as timestamp)\n    , interval 90 day)\n) as upper_limit\n    ", "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_base_new_event_limits`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-22T12:58:42.494015Z", "completed_at": "2023-12-22T12:58:44.857152Z"}, {"name": "execute", "started_at": "2023-12-22T12:58:44.858789Z", "completed_at": "2023-12-22T12:58:47.258439Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 4.7675628662109375, "adapter_response": {"_message": "MERGE (272.0 rows, 381.7 KiB processed)", "code": "MERGE", "rows_affected": 272, "bytes_processed": 390842, "bytes_billed": 31457280, "location": "europe-west2", "project_id": "com-snplow-sales-gcp", "job_id": "578df276-e26b-472b-8c39-b46d76898e15", "slot_ms": 20969}, "message": "MERGE (272.0 rows, 381.7 KiB processed)", "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_base_sessions_lifecycle_manifest", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n        with new_events_session_ids_init as (\n            select\n            \n                COALESCE(\n                    \n\n\n    coalesce(e.contexts_com_snowplowanalytics_snowplow_client_session_1_0_2[safe_offset(0)].session_id, e.contexts_com_snowplowanalytics_snowplow_client_session_1_0_1[safe_offset(0)].session_id)\n\n\n,e.domain_sessionid,NULL\n                ) as session_identifier,\n                max(\n                    COALESCE(\n                        \n\n\n    coalesce(e.contexts_com_snowplowanalytics_snowplow_client_session_1_0_2[safe_offset(0)].user_id, e.contexts_com_snowplowanalytics_snowplow_client_session_1_0_1[safe_offset(0)].user_id)\n\n\n,e.domain_userid,NULL\n                    )\n                ) as user_identifier, -- Edge case 1: Arbitary selection to avoid window function like first_value.\n            \n                min(collector_tstamp) as start_tstamp,\n                max(collector_tstamp) as end_tstamp\n\n            from `com-snplow-sales-gcp`.`rt_pipeline_prod1`.`events` e\n\n            where\n                dvce_sent_tstamp <= \n    timestamp_add(dvce_created_tstamp, interval 3 day)\n -- don't process data that's too late\n                and collector_tstamp >= \n        cast('2023-12-22 00:00:00+00:00' as timestamp)\n    \n                and collector_tstamp <= \n        cast('2023-12-22 12:55:06.094000+00:00' as timestamp)\n    \n                and app_id in ('website','console-qa') --filter on app_id if provided\n                and cast(True as boolean) --don't reprocess sessions that have already been processed.\n                \n\n            group by 1\n        ), new_events_session_ids as (\n            select *\n            from new_events_session_ids_init e\n            \n                where session_identifier is not null\n                and not exists (select 1 from `com-snplow-sales-gcp`.`scratch`.`snowplow_unified_base_quarantined_sessions` as a where a.session_identifier = e.session_identifier) -- don't continue processing v.long sessions\n\n        )\n        \n\n        , previous_sessions as (\n        select *\n\n        from `com-snplow-sales-gcp`.`scratch`.`snowplow_unified_base_sessions_lifecycle_manifest`\n\n        where start_tstamp >= \n        cast('2021-12-22 00:00:00+00:00' as timestamp)\n    \n        and cast(True as boolean) --don't reprocess sessions that have already been processed.\n        )\n\n        , session_lifecycle as (\n        select\n            ns.session_identifier,\n            coalesce(self.user_identifier, ns.user_identifier) as user_identifier, -- Edge case 1: Take previous value to keep domain_userid consistent. Not deterministic but performant\n            least(ns.start_tstamp, coalesce(self.start_tstamp, ns.start_tstamp)) as start_tstamp,\n            greatest(ns.end_tstamp, coalesce(self.end_tstamp, ns.end_tstamp)) as end_tstamp -- BQ 1 NULL will return null hence coalesce\n\n        from new_events_session_ids ns\n        left join previous_sessions as self\n            on ns.session_identifier = self.session_identifier\n\n        where\n            self.session_identifier is null -- process all new sessions\n            or self.end_tstamp < \n    timestamp_add(self.start_tstamp, interval 3 day)\n --stop updating sessions exceeding 3 days\n        )\n\n        \n\n        select\n        sl.session_identifier,\n        sl.user_identifier,\n        sl.start_tstamp,\n        least(\n    timestamp_add(sl.start_tstamp, interval 3 day)\n, sl.end_tstamp) as end_tstamp -- limit session length to max_session_days\n        \n\n        from session_lifecycle sl\n    ", "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_base_sessions_lifecycle_manifest`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-22T12:58:47.266232Z", "completed_at": "2023-12-22T12:58:48.007894Z"}, {"name": "execute", "started_at": "2023-12-22T12:58:48.009524Z", "completed_at": "2023-12-22T12:58:51.653684Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 4.390476942062378, "adapter_response": {"_message": "CREATE TABLE (272.0 rows, 39.3 KiB processed)", "code": "CREATE TABLE", "rows_affected": 272, "bytes_processed": 40256, "bytes_billed": 10485760, "location": "europe-west2", "project_id": "com-snplow-sales-gcp", "job_id": "6e5c54ba-6615-49e2-bffa-d9df321c705d", "slot_ms": 1607}, "message": "CREATE TABLE (272.0 rows, 39.3 KiB processed)", "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_base_sessions_this_run", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n        select\n        s.session_identifier,\n        s.user_identifier,\n        s.start_tstamp,\n        -- end_tstamp used in next step to limit events. When backfilling, set end_tstamp to upper_limit if end_tstamp > upper_limit.\n        -- This ensures we don't accidentally process events after upper_limit\n        case when s.end_tstamp > \n        cast('2023-12-22 12:55:06.094000+00:00' as timestamp)\n     then \n        cast('2023-12-22 12:55:06.094000+00:00' as timestamp)\n     else s.end_tstamp end as end_tstamp\n\n        from `com-snplow-sales-gcp`.`scratch`.`snowplow_unified_base_sessions_lifecycle_manifest` s\n\n        where\n        -- General window of start_tstamps to limit table scans. Logic complicated by backfills.\n        -- To be within the run, session start_tstamp must be >= lower_limit - max_session_days as we limit end_tstamp in manifest to start_tstamp + max_session_days\n        s.start_tstamp >= \n        cast('2023-12-19 00:00:00+00:00' as timestamp)\n    \n        and s.start_tstamp <= \n        cast('2023-12-22 12:55:06.094000+00:00' as timestamp)\n    \n        -- Select sessions within window that either; start or finish between lower & upper limit, start and finish outside of lower and upper limits\n        and not (s.start_tstamp > \n        cast('2023-12-22 12:55:06.094000+00:00' as timestamp)\n     or s.end_tstamp < \n        cast('2023-12-22 00:00:00+00:00' as timestamp)\n    )\n    ", "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_base_sessions_this_run`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-22T12:58:51.662276Z", "completed_at": "2023-12-22T12:58:54.101459Z"}, {"name": "execute", "started_at": "2023-12-22T12:58:54.102996Z", "completed_at": "2023-12-22T12:58:57.871784Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 6.212584972381592, "adapter_response": {"_message": "CREATE TABLE (2.4k rows, 3.9 MiB processed)", "code": "CREATE TABLE", "rows_affected": 2409, "bytes_processed": 4124481, "bytes_billed": 20971520, "location": "europe-west2", "project_id": "com-snplow-sales-gcp", "job_id": "5af82bf7-3475-49ca-8ede-e80e717e3475", "slot_ms": 18587}, "message": "CREATE TABLE (2.4k rows, 3.9 MiB processed)", "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_base_events_this_run", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n  \n\n  \n  \n  \n\n  \n  \n\n  \n\n\n\nwith base_query as (\n  \n        with identified_events AS (\n            select\n                COALESCE(\n                        \n\n\n    coalesce(e.contexts_com_snowplowanalytics_snowplow_client_session_1_0_2[safe_offset(0)].session_id, e.contexts_com_snowplowanalytics_snowplow_client_session_1_0_1[safe_offset(0)].session_id)\n\n\n,e.domain_sessionid,NULL\n                    ) as session_identifier,\n                e.*\n                \n\n            from `com-snplow-sales-gcp`.`rt_pipeline_prod1`.`events` e\n\n        )\n\n        select\n            a.*,\n            b.user_identifier -- take user_identifier from manifest. This ensures only 1 domain_userid per session.\n\n        from identified_events as a\n        inner join `com-snplow-sales-gcp`.`scratch`.`snowplow_unified_base_sessions_this_run` as b\n        on a.session_identifier = b.session_identifier\n\n        where a.collector_tstamp <= \n    timestamp_add(b.start_tstamp, interval 3 day)\n\n        and a.dvce_sent_tstamp <= \n    timestamp_add(a.dvce_created_tstamp, interval 3 day)\n\n        and a.collector_tstamp >= \n        cast('2023-12-22 00:01:03.250000+00:00' as timestamp)\n    \n        and a.collector_tstamp <= \n        cast('2023-12-22 12:55:06.094000+00:00' as timestamp)\n    \n        and a.collector_tstamp >= b.start_tstamp -- deal with late loading events\n\n        \n\n        and app_id in ('website','console-qa') --filter on app_id if provided\n\n        qualify row_number() over (partition by a.event_id order by a.collector_tstamp, a.dvce_created_tstamp) = 1\n    \n)\n\nselect\n  *\n  -- extract commonly used contexts / sdes (prefixed)\n  \n\n  \n\n  \n      ,coalesce(contexts_com_snowplowanalytics_snowplow_web_page_1_0_0[safe_offset(0)].id) as page_view__id\n  \n\n  \n\n  ,coalesce(contexts_com_iab_snowplow_spiders_and_robots_1_0_0[safe_offset(0)].category) as iab__category,\ncoalesce(contexts_com_iab_snowplow_spiders_and_robots_1_0_0[safe_offset(0)].primary_impact) as iab__primary_impact,\ncoalesce(contexts_com_iab_snowplow_spiders_and_robots_1_0_0[safe_offset(0)].reason) as iab__reason,\ncoalesce(contexts_com_iab_snowplow_spiders_and_robots_1_0_0[safe_offset(0)].spider_or_robot) as iab__spider_or_robot\n  \n\n  ,coalesce(contexts_com_snowplowanalytics_snowplow_ua_parser_context_1_0_0[safe_offset(0)].device_family) as ua__device_family,\ncoalesce(contexts_com_snowplowanalytics_snowplow_ua_parser_context_1_0_0[safe_offset(0)].os_family) as ua__os_family,\ncoalesce(contexts_com_snowplowanalytics_snowplow_ua_parser_context_1_0_0[safe_offset(0)].useragent_family) as ua__useragent_family,\ncoalesce(contexts_com_snowplowanalytics_snowplow_ua_parser_context_1_0_0[safe_offset(0)].os_major) as ua__os_major,\ncoalesce(contexts_com_snowplowanalytics_snowplow_ua_parser_context_1_0_0[safe_offset(0)].os_minor) as ua__os_minor,\ncoalesce(contexts_com_snowplowanalytics_snowplow_ua_parser_context_1_0_0[safe_offset(0)].os_patch) as ua__os_patch,\ncoalesce(contexts_com_snowplowanalytics_snowplow_ua_parser_context_1_0_0[safe_offset(0)].os_patch_minor) as ua__os_patch_minor,\ncoalesce(contexts_com_snowplowanalytics_snowplow_ua_parser_context_1_0_0[safe_offset(0)].os_version) as ua__os_version,\ncoalesce(contexts_com_snowplowanalytics_snowplow_ua_parser_context_1_0_0[safe_offset(0)].useragent_major) as ua__useragent_major,\ncoalesce(contexts_com_snowplowanalytics_snowplow_ua_parser_context_1_0_0[safe_offset(0)].useragent_minor) as ua__useragent_minor,\ncoalesce(contexts_com_snowplowanalytics_snowplow_ua_parser_context_1_0_0[safe_offset(0)].useragent_patch) as ua__useragent_patch,\ncoalesce(contexts_com_snowplowanalytics_snowplow_ua_parser_context_1_0_0[safe_offset(0)].useragent_version) as ua__useragent_version\n  \n\n  ,coalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].device_class, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].device_class, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].device_class, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].device_class) as yauaa__device_class,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].agent_class, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].agent_class, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].agent_class, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].agent_class) as yauaa__agent_class,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].agent_name, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].agent_name, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].agent_name, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].agent_name) as yauaa__agent_name,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].agent_name_version, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].agent_name_version, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].agent_name_version, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].agent_name_version) as yauaa__agent_name_version,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].agent_name_version_major, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].agent_name_version_major, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].agent_name_version_major, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].agent_name_version_major) as yauaa__agent_name_version_major,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].agent_version, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].agent_version, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].agent_version, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].agent_version) as yauaa__agent_version,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].agent_version_major, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].agent_version_major, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].agent_version_major, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].agent_version_major) as yauaa__agent_version_major,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].device_brand, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].device_brand, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].device_brand, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].device_brand) as yauaa__device_brand,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].device_name, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].device_name, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].device_name, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].device_name) as yauaa__device_name,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].device_version, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].device_version, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].device_version, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].device_version) as yauaa__device_version,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].layout_engine_class, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].layout_engine_class, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].layout_engine_class, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].layout_engine_class) as yauaa__layout_engine_class,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].layout_engine_name, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].layout_engine_name, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].layout_engine_name, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].layout_engine_name) as yauaa__layout_engine_name,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].layout_engine_name_version, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].layout_engine_name_version, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].layout_engine_name_version, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].layout_engine_name_version) as yauaa__layout_engine_name_version,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].layout_engine_name_version_major, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].layout_engine_name_version_major, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].layout_engine_name_version_major, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].layout_engine_name_version_major) as yauaa__layout_engine_name_version_major,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].layout_engine_version, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].layout_engine_version, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].layout_engine_version, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].layout_engine_version) as yauaa__layout_engine_version,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].layout_engine_version_major, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].layout_engine_version_major, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].layout_engine_version_major, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].layout_engine_version_major) as yauaa__layout_engine_version_major,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].operating_system_class, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].operating_system_class, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].operating_system_class, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].operating_system_class) as yauaa__operating_system_class,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].operating_system_name, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].operating_system_name, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].operating_system_name, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].operating_system_name) as yauaa__operating_system_name,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].operating_system_name_version, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].operating_system_name_version, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].operating_system_name_version, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].operating_system_name_version) as yauaa__operating_system_name_version,\ncoalesce(contexts_nl_basjes_yauaa_context_1_0_4[safe_offset(0)].operating_system_version, contexts_nl_basjes_yauaa_context_1_0_3[safe_offset(0)].operating_system_version, contexts_nl_basjes_yauaa_context_1_0_2[safe_offset(0)].operating_system_version, contexts_nl_basjes_yauaa_context_1_0_1[safe_offset(0)].operating_system_version) as yauaa__operating_system_version\n  \n\n  \n\n  \n    , cast(null as string) as browser__viewport\n    , cast(null as string) as browser__document_size\n    , cast(null as string) as browser__resolution\n    , cast(null as INT64) as browser__color_depth\n    , cast(null as FLOAT64) as browser__device_pixel_ratio\n    , cast(null as boolean) as browser__cookies_enabled\n    , cast(null as boolean) as browser__online\n    , cast(null as string) as browser__browser_language\n    , cast(null as string) as browser__document_language\n    , cast(null as boolean) as browser__webdriver\n    , cast(null as INT64) as browser__device_memory\n    , cast(null as INT64) as browser__hardware_concurrency\n    , cast(null as string) as browser__tab_id\n  \n\n  \n\n  \n\n  \n    ,coalesce(unstruct_event_com_snowplowanalytics_mobile_screen_view_1_0_0.id) as screen_view__id,\ncoalesce(unstruct_event_com_snowplowanalytics_mobile_screen_view_1_0_0.name) as screen_view__name,\ncoalesce(unstruct_event_com_snowplowanalytics_mobile_screen_view_1_0_0.previous_id) as screen_view__previous_id,\ncoalesce(unstruct_event_com_snowplowanalytics_mobile_screen_view_1_0_0.previous_name) as screen_view__previous_name,\ncoalesce(unstruct_event_com_snowplowanalytics_mobile_screen_view_1_0_0.previous_type) as screen_view__previous_type,\ncoalesce(unstruct_event_com_snowplowanalytics_mobile_screen_view_1_0_0.transition_type) as screen_view__transition_type,\ncoalesce(unstruct_event_com_snowplowanalytics_mobile_screen_view_1_0_0.type) as screen_view__type\n    \n\n  \n\n  \n\n  \n    ,coalesce(contexts_com_snowplowanalytics_snowplow_client_session_1_0_2[safe_offset(0)].session_id, contexts_com_snowplowanalytics_snowplow_client_session_1_0_1[safe_offset(0)].session_id) as session__session_id,\ncoalesce(contexts_com_snowplowanalytics_snowplow_client_session_1_0_2[safe_offset(0)].session_index, contexts_com_snowplowanalytics_snowplow_client_session_1_0_1[safe_offset(0)].session_index) as session__session_index,\ncoalesce(contexts_com_snowplowanalytics_snowplow_client_session_1_0_2[safe_offset(0)].user_id, contexts_com_snowplowanalytics_snowplow_client_session_1_0_1[safe_offset(0)].user_id) as session__user_id,\ncoalesce(contexts_com_snowplowanalytics_snowplow_client_session_1_0_2[safe_offset(0)].first_event_id, contexts_com_snowplowanalytics_snowplow_client_session_1_0_1[safe_offset(0)].first_event_id) as session__first_event_id,\ncoalesce(contexts_com_snowplowanalytics_snowplow_client_session_1_0_2[safe_offset(0)].previous_session_id, contexts_com_snowplowanalytics_snowplow_client_session_1_0_1[safe_offset(0)].previous_session_id) as session__previous_session_id\n    \n\n  \n\n  \n\n  \n    , cast(null as string) as mobile__device_manufacturer\n    , cast(null as string) as mobile__device_model\n    , cast(null as string) as mobile__os_type\n    , cast(null as string) as mobile__os_version\n    , cast(null as string) as mobile__android_idfa\n    , cast(null as string) as mobile__apple_idfa\n    , cast(null as string) as mobile__apple_idfv\n    , cast(null as string) as mobile__carrier\n    , cast(null as string) as mobile__open_idfa\n    , cast(null as string) as mobile__network_technology\n    , cast(null as string) as mobile__network_type\n    , cast(null as INT64) as mobile__physical_memory\n    , cast(null as INT64) as mobile__system_available_memory\n    , cast(null as INT64) as mobile__app_available_memory\n    , cast(null as INT64) as mobile__battery_level\n    , cast(null as string) as mobile__battery_state\n    , cast(null as boolean) as mobile__low_power_mode\n    , cast(null as INT64) as mobile__available_storage\n    , cast(null as INT64) as mobile__total_storage\n    , cast(null as boolean) as mobile__is_portrait\n    , cast(null as string) as mobile__resolution\n    , cast(null as FLOAT64) as mobile__scale\n    , cast(null as string) as mobile__language\n    , cast(null as string) as mobile__app_set_id\n    , cast(null as string) as mobile__app_set_id_scope\n  \n\n  \n\n  \n\n  \n    , cast(null as FLOAT64) as geo__latitude\n    , cast(null as FLOAT64) as geo__longitude\n    , cast(null as FLOAT64) as geo__latitude_longitude_accuracy\n    , cast(null as FLOAT64) as geo__altitude\n    , cast(null as FLOAT64) as geo__altitude_accuracy\n    , cast(null as FLOAT64) as geo__bearing\n    , cast(null as FLOAT64) as geo__speed\n  \n\n  \n\n  \n\n  \n    , cast(null as string) as app__build\n    , cast(null as string) as app__version\n  \n\n  \n\n  \n\n  \n      , cast(null as string) as screen__id\n      , cast(null as string) as screen__name\n      , cast(null as string) as screen__activity\n      , cast(null as string) as screen__fragment\n      , cast(null as string) as screen__top_view_controller\n      , cast(null as string) as screen__type\n      , cast(null as string) as screen__view_controller\n  \n\n  \n\n  \n\n  \n    , cast(null as string) as deep_link__url\n    , cast(null as string) as deep_link__referrer\n  \n\n  \n\n  \n\n  \n    , cast(null as string) as app_error__message\n    , cast(null as string) as app_error__programming_language\n    , cast(null as string) as app_error__class_name\n    , cast(null as string) as app_error__exception_name\n    , cast(null as boolean) as app_error__is_fatal\n    , cast(null as INT64) as app_error__line_number\n    , cast(null as string) as app_error__stack_trace\n    , cast(null as INT64) as app_error__thread_id\n    , cast(null as string) as app_error__thread_name\n  \n\n\n\nfrom base_query", "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_base_events_this_run`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-22T12:58:57.879645Z", "completed_at": "2023-12-22T12:58:57.901230Z"}, {"name": "execute", "started_at": "2023-12-22T12:58:57.902665Z", "completed_at": "2023-12-22T12:59:01.059709Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.1830692291259766, "adapter_response": {"_message": "CREATE TABLE (2.4k rows, 5.5 MiB processed)", "code": "CREATE TABLE", "rows_affected": 2409, "bytes_processed": 5725660, "bytes_billed": 10485760, "location": "europe-west2", "project_id": "com-snplow-sales-gcp", "job_id": "d0d39467-3014-4429-8bb3-846a04184e33", "slot_ms": 2543}, "message": "CREATE TABLE (2.4k rows, 5.5 MiB processed)", "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_events_this_run", "compiled": true, "compiled_code": "\n\n\n\n\n\n  with base as (\n\n    select\n      *,\n\n      coalesce(\n        \n          ev.page_view__id,\n        \n        \n          ev.screen_view__id,\n        \n        null, null) as view_id,\n\n        coalesce(\n        \n          ev.session__session_index,\n        \n        \n          ev.domain_sessionidx,\n        \n        null, null) as device_session_index,\n\n      coalesce(\n        \n          ev.page_referrer,\n        \n        null, null) as referrer,\n\n      coalesce(\n        \n          ev.page_url,\n        \n        null, null) as url,\n\n      coalesce(\n        \n          ev.dvce_screenwidth || 'x' || ev.dvce_screenheight,\n        \n        null, null) as screen_resolution,\n\n      coalesce(\n        \n        \n          ev.yauaa__operating_system_name,\n        \n        \n          ev.ua__os_family,\n        \n        null, null) as os_type,\n\n      coalesce(\n        \n          ev.yauaa__operating_system_version,\n        \n        \n        \n          ev.ua__os_version,\n        \n        null, null) as os_version,\n\n      coalesce(\n        \n          ev.domain_userid,\n        \n        \n          ev.session__user_id,\n        \n        null, null) as device_identifier,\n\n      case when platform = 'web' then 'Web' --includes mobile web\n          when platform = 'mob' then 'Mobile/Tablet'\n          when platform = 'pc' then 'Desktop/Laptop/Netbook'\n          when platform = 'srv' then 'Server-Side App'\n          when platform = 'app' then 'General App'\n          when platform = 'tv' then 'Connected TV'\n          when platform = 'cnsl' then 'Games Console'\n          when platform = 'iot' then 'Internet of Things' end as platform_name\n\n    from `com-snplow-sales-gcp`.`scratch`.`snowplow_unified_base_events_this_run` as ev\n\n  )\n\n  select\n    *,\n\n    \n      case when platform = 'web' then yauaa__device_class\n          when yauaa__device_class = 'Phone' then 'Mobile'\n          when yauaa__device_class = 'Tablet' then 'Tablet'\n          else platform_name end as device_category\n\n  from base\n\n", "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_events_this_run`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-22T12:59:01.068776Z", "completed_at": "2023-12-22T12:59:01.084273Z"}, {"name": "execute", "started_at": "2023-12-22T12:59:01.085767Z", "completed_at": "2023-12-22T12:59:03.517727Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.4521467685699463, "adapter_response": {"_message": "CREATE TABLE (340.0 rows, 311.1 KiB processed)", "code": "CREATE TABLE", "rows_affected": 340, "bytes_processed": 318562, "bytes_billed": 10485760, "location": "europe-west2", "project_id": "com-snplow-sales-gcp", "job_id": "3a587d44-a1f0-4951-84f2-b62a059538bc", "slot_ms": 1761}, "message": "CREATE TABLE (340.0 rows, 311.1 KiB processed)", "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_pv_engaged_time", "compiled": true, "compiled_code": "\n\n\n\n-- the first page ping fires after the minimum visit length (n seconds), every subsequent page ping fires after every heartbeat length (n seconds)\n-- there may be imperfectly timed pings and odd duplicates therefore the safest is to do a special calculation:\n-- each pings' epoch timestamp is taken (n seconds) which are then divided by the heartbeat length, floored (to get precise heartbeat length separated intervals)\n-- each distinct value means the user spent that * the heartbeat length on the website (minus the first, which needed the minimum visit lenght to fire)\n\n\n\n\n\nselect\n  ev.view_id,\n  ev.session_identifier,\n  max(ev.derived_tstamp) as end_tstamp,\n  (30 * (count(distinct(floor(unix_seconds(ev.dvce_created_tstamp)/30))) - 1)) + 30 as engaged_time_in_s\n\nfrom `com-snplow-sales-gcp`.`scratch`.`snowplow_unified_events_this_run` as ev\n\nwhere ev.event_name = 'page_ping'\nand ev.view_id is not null\n\ngroup by 1, 2", "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_pv_engaged_time`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-22T12:59:03.524962Z", "completed_at": "2023-12-22T12:59:03.541782Z"}, {"name": "execute", "started_at": "2023-12-22T12:59:03.543252Z", "completed_at": "2023-12-22T12:59:05.599024Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.077092170715332, "adapter_response": {"_message": "CREATE TABLE (562.0 rows, 364.8 KiB processed)", "code": "CREATE TABLE", "rows_affected": 562, "bytes_processed": 373506, "bytes_billed": 10485760, "location": "europe-west2", "project_id": "com-snplow-sales-gcp", "job_id": "1d6c12df-fc6c-4d5e-91a4-2c4132ccca28", "slot_ms": 1701}, "message": "CREATE TABLE (562.0 rows, 364.8 KiB processed)", "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_pv_scroll_depth", "compiled": true, "compiled_code": "\n\n\n\nwith prep as (\n  select\n    ev.view_id,\n    ev.session_identifier,\n\n    max(ev.doc_width) as doc_width,\n    max(ev.doc_height) as doc_height,\n\n    max(ev.br_viewwidth) as br_viewwidth,\n    max(ev.br_viewheight) as br_viewheight,\n\n    -- coalesce replaces null with 0 (because the page view event does send an offset)\n    -- greatest prevents outliers (negative offsets)\n    -- least also prevents outliers (offsets greater than the docwidth or docheight)\n\n    least(greatest(min(coalesce(ev.pp_xoffset_min, 0)), 0), max(ev.doc_width)) as hmin, -- should be zero\n    least(greatest(max(coalesce(ev.pp_xoffset_max, 0)), 0), max(ev.doc_width)) as hmax,\n\n    least(greatest(min(coalesce(ev.pp_yoffset_min, 0)), 0), max(ev.doc_height)) as vmin, -- should be zero (edge case: not zero because the pv event is missing)\n    least(greatest(max(coalesce(ev.pp_yoffset_max, 0)), 0), max(ev.doc_height)) as vmax\n\n  from `com-snplow-sales-gcp`.`scratch`.`snowplow_unified_events_this_run` as ev\n\n  where ev.event_name in ('page_view', 'page_ping')\n    and ev.view_id is not null\n    and ev.doc_height > 0 -- exclude problematic (but rare) edge case\n    and ev.doc_width > 0 -- exclude problematic (but rare) edge case\n\n  group by 1, 2\n)\n\nselect\n  view_id,\n  session_identifier,\n\n  doc_width,\n  doc_height,\n\n  br_viewwidth,\n  br_viewheight,\n\n  hmin,\n  hmax,\n  vmin,\n  vmax,\n\n  cast(round(100*(greatest(hmin, 0)/cast(doc_width as FLOAT64))) as FLOAT64) as relative_hmin, -- brackets matter: because hmin is of type int, we need to divide before we multiply by 100 or we risk an overflow\n  cast(round(100*(least(hmax + br_viewwidth, doc_width)/cast(doc_width as FLOAT64))) as FLOAT64) as relative_hmax,\n  cast(round(100*(greatest(vmin, 0)/cast(doc_height as FLOAT64))) as FLOAT64) as relative_vmin,\n  cast(round(100*(least(vmax + br_viewheight, doc_height)/cast(doc_height as FLOAT64))) as FLOAT64) as relative_vmax -- not zero when a user hasn't scrolled because it includes the non-zero viewheight\n\nfrom prep", "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_pv_scroll_depth`"}, {"status": "error", "timing": [{"name": "compile", "started_at": "2023-12-22T12:59:05.606504Z", "completed_at": "2023-12-22T12:59:05.791728Z"}, {"name": "execute", "started_at": "2023-12-22T12:59:05.793239Z", "completed_at": "2023-12-22T12:59:06.359073Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8666210174560547, "adapter_response": {}, "message": "Runtime Error in model snowplow_unified_sessions_this_run (models/sessions/scratch/snowplow_unified_sessions_this_run.sql)\n  404 Not found: Dataset com-snplow-sales-gcp:scratch_snowplow_manifest was not found in location europe-west2\n  \n  Location: europe-west2\n  Job ID: f9e5d22f-261f-4bb5-9238-df12702f1c68\n  ", "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_sessions_this_run", "compiled": true, "compiled_code": "\n\n\n\nwith session_firsts as (\n    select\n        \n\n    -- event categorization fields\n    ev.event_name,\n    ev.user_id,\n    ev.user_identifier,\n    ev.network_userid,\n\n    -- timestamp fields\n    ev.dvce_created_tstamp,\n    ev.collector_tstamp,\n    ev.derived_tstamp,\n    ev.derived_tstamp as start_tstamp,\n\n    -- geo fields\n    ev.geo_country,\n    ev.geo_region,\n    ev.geo_region_name,\n    ev.geo_city,\n    ev.geo_zipcode,\n    ev.geo_latitude,\n    ev.geo_longitude,\n    ev.geo_timezone,\n    ev.user_ipaddress,\n\n    -- device fields\n    ev.app_id,\n    ev.platform,\n    ev.device_identifier,\n    ev.device_category,\n    ev.device_session_index,\n    ev.os_version,\n    ev.os_type,\n    ev.screen_resolution,\n\n    -- marketing fields\n    ev.mkt_medium,\n    ev.mkt_source,\n    ev.mkt_term,\n    ev.mkt_content,\n    ev.mkt_campaign,\n    ev.mkt_clickid,\n    ev.mkt_network,\n    \ncase\n   when lower(trim(mkt_source)) = '(direct)' and lower(trim(mkt_medium)) in ('(not set)', '(none)') then 'Direct'\n   when lower(trim(mkt_medium)) like '%cross-network%' then 'Cross-network'\n   when regexp_contains(trim(mkt_medium), r'(?i)^(.*cp.*|ppc|retargeting|paid.*)$') then\n      case\n         when upper(source_category) = 'SOURCE_CATEGORY_SHOPPING'\n            or regexp_contains(trim(mkt_campaign), r'(?i)^(.*(([^a-df-z]|^)shop|shopping).*)$') then 'Paid Shopping'\n         when upper(source_category) = 'SOURCE_CATEGORY_SEARCH' then 'Paid Search'\n         when upper(source_category) = 'SOURCE_CATEGORY_SOCIAL' then 'Paid Social'\n         when upper(source_category) = 'SOURCE_CATEGORY_VIDEO' then 'Paid Video'\n         else 'Paid Other'\n      end\n   when lower(trim(mkt_medium)) in ('display', 'banner', 'expandable', 'interstitial', 'cpm') then 'Display'\n   when upper(source_category) = 'SOURCE_CATEGORY_SHOPPING'\n      or regexp_contains(trim(mkt_campaign), r'(?i)^(.*(([^a-df-z]|^)shop|shopping).*)$') then 'Organic Shopping'\n   when upper(source_category) = 'SOURCE_CATEGORY_SOCIAL' or lower(trim(mkt_medium)) in ('social', 'social-network', 'sm', 'social network', 'social media') then 'Organic Social'\n   when upper(source_category) = 'SOURCE_CATEGORY_VIDEO'\n      or regexp_contains(trim(mkt_medium), r'(?i)^(.*video.*)$') then 'Organic Video'\n   when upper(source_category) = 'SOURCE_CATEGORY_SEARCH' or lower(trim(mkt_medium)) = 'organic' then 'Organic Search'\n   when lower(trim(mkt_medium)) in ('referral', 'app', 'link') then 'Referral'\n   when lower(trim(mkt_source)) in ('email', 'e-mail', 'e_mail', 'e mail') or lower(trim(mkt_medium)) in ('email', 'e-mail', 'e_mail', 'e mail') then 'Email'\n   when lower(trim(mkt_medium)) = 'affiliate' then 'Affiliates'\n   when lower(trim(mkt_medium)) = 'audio' then 'Audio'\n   when lower(trim(mkt_source)) = 'sms' or lower(trim(mkt_medium)) = 'sms' then 'SMS'\n   when lower(trim(mkt_medium)) like '%push' or regexp_contains(trim(mkt_medium), r'(?i).*(mobile|notification).*') or lower(trim(mkt_source)) = 'firebase' then 'Mobile Push Notifications'\n   else 'Unassigned'\nend\n as default_channel_group,\n\n    -- webpage / referer / browser fields\n    ev.page_url,\n    ev.page_referrer,\n    ev.refr_medium,\n    ev.refr_source,\n    ev.refr_term,\n    ev.useragent\n\n\n        , session_identifier\n\n        \n          \n\n      , ev.br_lang\n      , ev.br_viewwidth\n      , ev.br_viewheight\n      , ev.br_renderengine\n      , ev.doc_width\n      , ev.doc_height\n      , ev.page_title\n      , ev.page_urlscheme\n      , ev.page_urlhost\n      , ev.page_urlpath\n      , ev.page_urlquery\n      , ev.page_urlfragment\n      , ev.refr_urlscheme\n      , ev.refr_urlhost\n      , ev.refr_urlpath\n      , ev.refr_urlquery\n      , ev.refr_urlfragment\n      , ev.os_timezone\n\n\n        \n\n        \n          \n\n  , ev.session__previous_session_id\n  , ev.screen_view__name\n  , ev.screen_view__previous_id\n  , ev.screen_view__previous_name\n  , ev.screen_view__previous_type\n  , ev.screen_view__transition_type\n  , ev.screen_view__type\n\n\n        \n\n        \n          -- updated with mapping as part of post hook on derived sessions table\n          , cast(user_identifier as \n    string\n) as stitched_user_id\n        \n\n        \n          \n\n    , ev.iab__category\n    , ev.iab__primary_impact\n    , ev.iab__reason\n    , ev.iab__spider_or_robot\n\n\n        \n\n        \n          \n\n    , ev.yauaa__device_class\n    , ev.yauaa__agent_class\n    , ev.yauaa__agent_name\n    , ev.yauaa__agent_name_version\n    , ev.yauaa__agent_name_version_major\n    , ev.yauaa__agent_version\n    , ev.yauaa__agent_version_major\n    , ev.yauaa__device_brand\n    , ev.yauaa__device_name\n    , ev.yauaa__device_version\n    , ev.yauaa__layout_engine_class\n    , ev.yauaa__layout_engine_name\n    , ev.yauaa__layout_engine_name_version\n    , ev.yauaa__layout_engine_name_version_major\n    , ev.yauaa__layout_engine_version\n    , ev.yauaa__layout_engine_version_major\n    , ev.yauaa__operating_system_class\n    , ev.yauaa__operating_system_name\n    , ev.yauaa__operating_system_name_version\n    , ev.yauaa__operating_system_version\n\n\n        \n\n        \n          \n\n      , ev.ua__useragent_family\n      , ev.ua__useragent_major\n      , ev.ua__useragent_minor\n      , ev.ua__useragent_patch\n      , ev.ua__useragent_version\n      , ev.ua__os_family\n      , ev.ua__os_major\n      , ev.ua__os_minor\n      , ev.ua__os_patch\n      , ev.ua__os_patch_minor\n      , ev.ua__os_version\n      , ev.ua__device_family\n\n\n        \n\n        \n\n        \n\n        , g.name as geo_country_name\n        , g.region as geo_continent\n        , l.name as br_lang_name\n\n        \n\n        \n\n        \n\n        , \n  regexp_extract(page_urlquery ,r'utm_source_platform=([^?&#]*)')\n as mkt_source_platform\n\n    from `com-snplow-sales-gcp`.`scratch`.`snowplow_unified_events_this_run` ev\n    left join\n        `com-snplow-sales-gcp`.`scratch_snowplow_manifest`.`snowplow_unified_dim_ga4_source_categories` c on lower(trim(ev.mkt_source)) = lower(c.source)\n    left join\n        `com-snplow-sales-gcp`.`scratch_snowplow_manifest`.`snowplow_unified_dim_rfc_5646_language_mapping` l on lower(ev.br_lang) = lower(l.lang_tag)\n    left join\n        `com-snplow-sales-gcp`.`scratch_snowplow_manifest`.`snowplow_unified_dim_geo_country_mapping` g on lower(ev.geo_country) = lower(g.alpha_2)\n    where event_name in ('page_ping', 'page_view', 'screen_view')\n    and view_id is not null\n\n    \n      \n  and not regexp_contains(useragent, '(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|(browser|screen)shots|analyz|index|thumb|check|facebook|PingdomBot|PhantomJS|YandexBot|Twitterbot|a_archiver|facebookexternalhit|Bingbot|BingPreview|Googlebot|Baiduspider|360(Spider|User-agent)|semalt)')\n\n    \n\n    \n      qualify row_number() over (partition by session_identifier order by derived_tstamp, dvce_created_tstamp, event_id) = 1\n    \n)\n\n, session_lasts as (\n    select\n\n      ev.event_name as last_event_name,\n      ev.geo_country as last_geo_country,\n      ev.geo_city as last_geo_city,\n      ev.geo_region_name as last_geo_region_name,\n      g.name as last_geo_country_name,\n      g.region as last_geo_continent,\n      ev.page_url as last_page_url,\n\n      \n        ev.page_title as last_page_title,\n        ev.page_urlscheme as last_page_urlscheme,\n        ev.page_urlhost as last_page_urlhost,\n        ev.page_urlpath as last_page_urlpath,\n        ev.page_urlquery as last_page_urlquery,\n        ev.page_urlfragment as last_page_urlfragment,\n        br_lang as last_br_lang,\n        l.name as last_br_lang_name,\n      \n\n      \n        ev.screen_view__name as last_screen_view__name,\n        ev.screen_view__transition_type as last_screen_view__transition_type,\n        ev.screen_view__type as last_screen_view__type,\n      \n\n      \n\n      session_identifier\n\n    from `com-snplow-sales-gcp`.`scratch`.`snowplow_unified_events_this_run` ev\n    left join\n        `com-snplow-sales-gcp`.`scratch_snowplow_manifest`.`snowplow_unified_dim_rfc_5646_language_mapping` l on lower(ev.br_lang) = lower(l.lang_tag)\n    left join\n        `com-snplow-sales-gcp`.`scratch_snowplow_manifest`.`snowplow_unified_dim_geo_country_mapping` g on lower(ev.geo_country) = lower(g.alpha_2)\n    where\n        event_name in ('page_view', 'screen_view')\n        and view_id is not null\n        \n            \n  and not regexp_contains(useragent, '(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|(browser|screen)shots|analyz|index|thumb|check|facebook|PingdomBot|PhantomJS|YandexBot|Twitterbot|a_archiver|facebookexternalhit|Bingbot|BingPreview|Googlebot|Baiduspider|360(Spider|User-agent)|semalt)')\n\n        \n\n    \n      qualify row_number() over (partition by session_identifier order by derived_tstamp desc, dvce_created_tstamp desc, event_id) = 1\n    \n)\n\n, session_aggs as (\n    select\n      session_identifier\n      , min(derived_tstamp) as start_tstamp\n      , max(derived_tstamp) as end_tstamp\n      , count(*) as total_events\n      , count(distinct view_id) as views\n\n      \n\n            -- (hb * (#page pings - # distinct page view ids ON page pings)) + (# distinct page view ids ON page pings * min visit length)\n        , (30 * (\n              -- number of (unqiue in heartbeat increment) pages pings following a page ping (gap of heartbeat)\n              count(distinct case when event_name = 'page_ping' and view_id is not null then\n                          -- need to get a unique list of floored time PER page view, so create a dummy surrogate key...\n                          view_id || cast(floor(unix_seconds(dvce_created_tstamp)/30) as string)\n                      else null end) - count(distinct case when event_name = 'page_ping' and view_id is not null then view_id else null end)\n                            ))  +\n                            -- number of page pings following a page view (or no event) (gap of min visit length)\n                            (count(distinct case when event_name = 'page_ping' and view_id is not null then view_id else null end) * 30) as engaged_time_in_s\n        , \n    timestamp_diff(max(derived_tstamp), min(derived_tstamp), second)\n as absolute_time_in_s\n      \n\n      \n\n      \n        , count(distinct screen_view__name) as screen_names_viewed\n      \n\n    from `com-snplow-sales-gcp`.`scratch`.`snowplow_unified_events_this_run`\n    where 1 = 1\n\n    \n        \n  and not regexp_contains(useragent, '(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|(browser|screen)shots|analyz|index|thumb|check|facebook|PingdomBot|PhantomJS|YandexBot|Twitterbot|a_archiver|facebookexternalhit|Bingbot|BingPreview|Googlebot|Baiduspider|360(Spider|User-agent)|semalt)')\n\n    \n\n    group by session_identifier\n)\n\n-- Redshift does not allow listagg and other aggregations in the same CTE\n\nselect\n\n  -- event categorization fields\n  f.event_name as first_event_name\n  , l.last_event_name\n  , f.session_identifier\n  \n    , f.session__previous_session_id\n  \n\n  -- user id fields\n  , f.user_id\n  , f.user_identifier\n  , f.stitched_user_id\n  , f.network_userid\n\n  -- timestamp fields\n  -- when the session starts with a ping we need to add the min visit length to get when the session actually started\n  , case when f.event_name = 'page_ping' then \n    timestamp_add(a.start_tstamp, interval -30 second)\n else a.start_tstamp end as start_tstamp\n  , a.end_tstamp -- only page views with pings will have a row in table t\n  , \n    current_timestamp()\n as model_tstamp\n\n  -- device fields\n  , f.app_id\n  , f.platform\n  , f.device_identifier\n  , f.device_category\n  , f.device_session_index\n  , f.os_version\n  , f.os_type\n\n  \n    , f.os_timezone\n  \n\n  , f.screen_resolution\n\n  \n    , f.yauaa__device_class\n    , f.yauaa__device_version\n    , f.yauaa__operating_system_version\n    , f.yauaa__operating_system_class\n    , f.yauaa__operating_system_name\n    , f.yauaa__operating_system_name_version\n  \n\n  \n\n  -- geo fields\n  , f.geo_country as first_geo_country\n  , f.geo_region_name as first_geo_region_name\n  , f.geo_city as first_geo_city\n  , f.geo_country_name as first_geo_country_name\n  , f.geo_continent as first_geo_continent\n\n  , case when l.last_geo_country is null then coalesce(l.last_geo_country, f.geo_country) else l.last_geo_country end as last_geo_country\n  , case when l.last_geo_country is null then coalesce(l.last_geo_region_name, f.geo_region_name) else l.last_geo_region_name end as last_geo_region_name\n  , case when l.last_geo_country is null then coalesce(l.last_geo_city, f.geo_city) else l.last_geo_city end as last_geo_city\n  , case when l.last_geo_country is null then coalesce(l.last_geo_country_name,f.geo_country_name) else l.last_geo_country_name end as last_geo_country_name\n  , case when l.last_geo_country is null then coalesce(l.last_geo_continent, f.geo_continent) else l.last_geo_continent end as last_geo_continent\n\n  , f.geo_zipcode\n  , f.geo_latitude\n  , f.geo_longitude\n  , f.geo_timezone\n  , f.user_ipaddress\n\n  -- engagement fields\n  , a.views\n  , a.total_events\n  , \n    views >= 2\n\n    \n      or engaged_time_in_s / 30 >= 2\n as is_engaged\n  -- when the session starts with a ping we need to add the min visit length to get when the session actually started\n\n  \n    , a.engaged_time_in_s\n    , a.absolute_time_in_s + case when f.event_name = 'page_ping' then 30 else 0 end as absolute_time_in_s\n\n  \n    , \n    timestamp_diff(a.end_tstamp, a.start_tstamp, second)\n as session_duration_s\n    , a.screen_names_viewed\n\n  -- marketing fields\n  , f.mkt_medium\n  , f.mkt_source\n  , f.mkt_term\n  , f.mkt_content\n  , f.mkt_campaign\n  , f.mkt_clickid\n  , f.mkt_network\n  , f.default_channel_group\n  , mkt_source_platform\n\n  -- webpage / referrer / browser fields\n  , f.page_url as first_page_url\n  , case when l.last_page_url is null then coalesce(l.last_page_url, f.page_url) else l.last_page_url end as last_page_url\n  , f.page_referrer\n  , f.refr_medium\n  , f.refr_source\n  , f.refr_term\n\n  \n    , f.page_title as first_page_title\n    , f.page_urlscheme as first_page_urlscheme\n    , f.page_urlhost as first_page_urlhost\n    , f.page_urlpath as first_page_urlpath\n    , f.page_urlquery as first_page_urlquery\n    , f.page_urlfragment as first_page_urlfragment\n    -- only take the first value when the last is genuinely missing (base on url as has to always be populated)\n    , case when l.last_page_url is null then coalesce(l.last_page_title, f.page_title) else l.last_page_title end as last_page_title\n    , case when l.last_page_url is null then coalesce(l.last_page_urlscheme, f.page_urlscheme) else l.last_page_urlscheme end as last_page_urlscheme\n    , case when l.last_page_url is null then coalesce(l.last_page_urlhost, f.page_urlhost) else l.last_page_urlhost end as last_page_urlhost\n    , case when l.last_page_url is null then coalesce(l.last_page_urlpath, f.page_urlpath) else l.last_page_urlpath end as last_page_urlpath\n    , case when l.last_page_url is null then coalesce(l.last_page_urlquery, f.page_urlquery) else l.last_page_urlquery end as last_page_urlquery\n    , case when l.last_page_url is null then coalesce(l.last_page_urlfragment, f.page_urlfragment) else l.last_page_urlfragment end as last_page_urlfragment\n    , f.refr_urlscheme\n    , f.refr_urlhost\n    , f.refr_urlpath\n    , f.refr_urlquery\n    , f.refr_urlfragment\n    , f.br_renderengine\n    , f.br_lang as first_br_lang\n    , f.br_lang_name as first_br_lang_name\n    , case when l.last_br_lang is null then coalesce(l.last_br_lang, f.br_lang) else l.last_br_lang end as last_br_lang\n    , case when l.last_br_lang is null then coalesce(l.last_br_lang_name, f.br_lang_name) else l.last_br_lang_name end as last_br_lang_name\n  \n\n  -- iab enrichment fields\n  \n    , f.iab__category\n    , f.iab__primary_impact\n    , f.iab__reason\n    , f.iab__spider_or_robot\n  \n\n  -- yauaa enrichment fields\n  \n    , f.yauaa__device_name\n    , f.yauaa__agent_class\n    , f.yauaa__agent_name\n    , f.yauaa__agent_name_version\n    , f.yauaa__agent_name_version_major\n    , f.yauaa__agent_version\n    , f.yauaa__agent_version_major\n    , f.yauaa__layout_engine_class\n    , f.yauaa__layout_engine_name\n    , f.yauaa__layout_engine_name_version\n    , f.yauaa__layout_engine_name_version_major\n    , f.yauaa__layout_engine_version\n    , f.yauaa__layout_engine_version_major\n  \n\n  -- ua parser enrichment fields\n  \n    , f.ua__device_family\n    , f.ua__os_version\n    , f.ua__os_major\n    , f.ua__os_minor\n    , f.ua__os_patch\n    , f.ua__os_patch_minor\n    , f.ua__useragent_family\n    , f.ua__useragent_major\n    , f.ua__useragent_minor\n    , f.ua__useragent_patch\n    , f.ua__useragent_version\n  \n\n  -- mobile only\n  \n    , f.screen_view__name as first_screen_view__name\n    , f.screen_view__type as first_screen_view__type\n    , case when l.last_screen_view__name is null then coalesce(l.last_screen_view__name, f.screen_view__name) else l.last_screen_view__name end as last_screen_view__name\n    , case when l.last_screen_view__transition_type is null then coalesce(l.last_screen_view__transition_type, f.screen_view__transition_type) else l.last_screen_view__transition_type end as last_screen_view__transition_type\n    , case when l.last_screen_view__type is null then coalesce(l.last_screen_view__type, f.screen_view__type) else l.last_screen_view__type end as last_screen_view__type\n    , f.screen_view__previous_id\n    , f.screen_view__previous_name\n    , f.screen_view__previous_type\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  , f.useragent\n\n  -- conversion fields\n\n  -- passthrough fields\n\nfrom session_firsts f\n\nleft join session_lasts l\non f.session_identifier = l.session_identifier\n\n\n\nleft join session_aggs a\non f.session_identifier = a.session_identifier\n\n", "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_sessions_this_run`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-22T12:59:06.477207Z", "completed_at": "2023-12-22T12:59:06.493494Z"}, {"name": "execute", "started_at": "2023-12-22T12:59:06.494941Z", "completed_at": "2023-12-22T12:59:08.885090Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.4109411239624023, "adapter_response": {"_message": "CREATE TABLE (8.0 rows, 218.2 KiB processed)", "code": "CREATE TABLE", "rows_affected": 8, "bytes_processed": 223410, "bytes_billed": 10485760, "location": "europe-west2", "project_id": "com-snplow-sales-gcp", "job_id": "5c72424c-b899-4ae0-b454-2555c405a6d0", "slot_ms": 13363}, "message": "CREATE TABLE (8.0 rows, 218.2 KiB processed)", "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_user_mapping", "compiled": true, "compiled_code": "\n\n\n\n\nselect distinct\n  user_identifier,\n  last_value(user_id) over(\n    partition by user_identifier\n    order by collector_tstamp\n    rows between unbounded preceding and unbounded following\n  ) as user_id,\n  max(collector_tstamp) over (partition by user_identifier) as end_tstamp\n\nfrom `com-snplow-sales-gcp`.`scratch`.`snowplow_unified_events_this_run`\n\nwhere True --returns false if run doesn't contain new events.\nand user_id is not null\nand user_identifier is not null", "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_user_mapping`"}, {"status": "error", "timing": [{"name": "compile", "started_at": "2023-12-22T12:59:08.892857Z", "completed_at": "2023-12-22T12:59:08.949310Z"}, {"name": "execute", "started_at": "2023-12-22T12:59:08.950794Z", "completed_at": "2023-12-22T12:59:09.635762Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.7494907379150391, "adapter_response": {}, "message": "Runtime Error in model snowplow_unified_views_this_run (models/views/scratch/snowplow_unified_views_this_run.sql)\n  404 Not found: Dataset com-snplow-sales-gcp:scratch_snowplow_manifest was not found in location europe-west2\n  \n  Location: europe-west2\n  Job ID: 3241436f-c8d5-426a-8734-3495ae3b124a\n  ", "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_views_this_run", "compiled": true, "compiled_code": "\n\n\n\nwith prep as (\n  select\n\n    \n\n    -- event categorization fields\n    ev.event_name,\n    ev.user_id,\n    ev.user_identifier,\n    ev.network_userid,\n\n    -- timestamp fields\n    ev.dvce_created_tstamp,\n    ev.collector_tstamp,\n    ev.derived_tstamp,\n    ev.derived_tstamp as start_tstamp,\n\n    -- geo fields\n    ev.geo_country,\n    ev.geo_region,\n    ev.geo_region_name,\n    ev.geo_city,\n    ev.geo_zipcode,\n    ev.geo_latitude,\n    ev.geo_longitude,\n    ev.geo_timezone,\n    ev.user_ipaddress,\n\n    -- device fields\n    ev.app_id,\n    ev.platform,\n    ev.device_identifier,\n    ev.device_category,\n    ev.device_session_index,\n    ev.os_version,\n    ev.os_type,\n    ev.screen_resolution,\n\n    -- marketing fields\n    ev.mkt_medium,\n    ev.mkt_source,\n    ev.mkt_term,\n    ev.mkt_content,\n    ev.mkt_campaign,\n    ev.mkt_clickid,\n    ev.mkt_network,\n    \ncase\n   when lower(trim(mkt_source)) = '(direct)' and lower(trim(mkt_medium)) in ('(not set)', '(none)') then 'Direct'\n   when lower(trim(mkt_medium)) like '%cross-network%' then 'Cross-network'\n   when regexp_contains(trim(mkt_medium), r'(?i)^(.*cp.*|ppc|retargeting|paid.*)$') then\n      case\n         when upper(source_category) = 'SOURCE_CATEGORY_SHOPPING'\n            or regexp_contains(trim(mkt_campaign), r'(?i)^(.*(([^a-df-z]|^)shop|shopping).*)$') then 'Paid Shopping'\n         when upper(source_category) = 'SOURCE_CATEGORY_SEARCH' then 'Paid Search'\n         when upper(source_category) = 'SOURCE_CATEGORY_SOCIAL' then 'Paid Social'\n         when upper(source_category) = 'SOURCE_CATEGORY_VIDEO' then 'Paid Video'\n         else 'Paid Other'\n      end\n   when lower(trim(mkt_medium)) in ('display', 'banner', 'expandable', 'interstitial', 'cpm') then 'Display'\n   when upper(source_category) = 'SOURCE_CATEGORY_SHOPPING'\n      or regexp_contains(trim(mkt_campaign), r'(?i)^(.*(([^a-df-z]|^)shop|shopping).*)$') then 'Organic Shopping'\n   when upper(source_category) = 'SOURCE_CATEGORY_SOCIAL' or lower(trim(mkt_medium)) in ('social', 'social-network', 'sm', 'social network', 'social media') then 'Organic Social'\n   when upper(source_category) = 'SOURCE_CATEGORY_VIDEO'\n      or regexp_contains(trim(mkt_medium), r'(?i)^(.*video.*)$') then 'Organic Video'\n   when upper(source_category) = 'SOURCE_CATEGORY_SEARCH' or lower(trim(mkt_medium)) = 'organic' then 'Organic Search'\n   when lower(trim(mkt_medium)) in ('referral', 'app', 'link') then 'Referral'\n   when lower(trim(mkt_source)) in ('email', 'e-mail', 'e_mail', 'e mail') or lower(trim(mkt_medium)) in ('email', 'e-mail', 'e_mail', 'e mail') then 'Email'\n   when lower(trim(mkt_medium)) = 'affiliate' then 'Affiliates'\n   when lower(trim(mkt_medium)) = 'audio' then 'Audio'\n   when lower(trim(mkt_source)) = 'sms' or lower(trim(mkt_medium)) = 'sms' then 'SMS'\n   when lower(trim(mkt_medium)) like '%push' or regexp_contains(trim(mkt_medium), r'(?i).*(mobile|notification).*') or lower(trim(mkt_source)) = 'firebase' then 'Mobile Push Notifications'\n   else 'Unassigned'\nend\n as default_channel_group,\n\n    -- webpage / referer / browser fields\n    ev.page_url,\n    ev.page_referrer,\n    ev.refr_medium,\n    ev.refr_source,\n    ev.refr_term,\n    ev.useragent\n\n\n    , view_id\n    , session_identifier\n    , event_id\n\n\n    \n      \n\n      , ev.br_lang\n      , ev.br_viewwidth\n      , ev.br_viewheight\n      , ev.br_renderengine\n      , ev.doc_width\n      , ev.doc_height\n      , ev.page_title\n      , ev.page_urlscheme\n      , ev.page_urlhost\n      , ev.page_urlpath\n      , ev.page_urlquery\n      , ev.page_urlfragment\n      , ev.refr_urlscheme\n      , ev.refr_urlhost\n      , ev.refr_urlpath\n      , ev.refr_urlquery\n      , ev.refr_urlfragment\n      , ev.os_timezone\n\n\n      , \n  case when ev.page_url like '%/product%' then 'PDP'\n      when ev.page_url like '%/list%' then 'PLP'\n      when ev.page_url like '%/checkout%' then 'checkout'\n      when ev.page_url like '%/home%' then 'homepage'\n      else 'other'\n  end\n\n as content_group\n      , coalesce(\n      \n        ev.br_colordepth,\n      \n      null) as br_colordepth\n    \n\n    \n     \n\n  , ev.session__previous_session_id\n  , ev.screen_view__name\n  , ev.screen_view__previous_id\n  , ev.screen_view__previous_name\n  , ev.screen_view__previous_type\n  , ev.screen_view__transition_type\n  , ev.screen_view__type\n\n\n    \n\n    \n      , cast(null as \n    string\n) as stitched_user_id\n    \n\n    \n      \n\n    , ev.iab__category\n    , ev.iab__primary_impact\n    , ev.iab__reason\n    , ev.iab__spider_or_robot\n\n\n    \n\n    \n      \n\n    , ev.yauaa__device_class\n    , ev.yauaa__agent_class\n    , ev.yauaa__agent_name\n    , ev.yauaa__agent_name_version\n    , ev.yauaa__agent_name_version_major\n    , ev.yauaa__agent_version\n    , ev.yauaa__agent_version_major\n    , ev.yauaa__device_brand\n    , ev.yauaa__device_name\n    , ev.yauaa__device_version\n    , ev.yauaa__layout_engine_class\n    , ev.yauaa__layout_engine_name\n    , ev.yauaa__layout_engine_name_version\n    , ev.yauaa__layout_engine_name_version_major\n    , ev.yauaa__layout_engine_version\n    , ev.yauaa__layout_engine_version_major\n    , ev.yauaa__operating_system_class\n    , ev.yauaa__operating_system_name\n    , ev.yauaa__operating_system_name_version\n    , ev.yauaa__operating_system_version\n\n\n    \n\n    \n      \n\n      , ev.ua__useragent_family\n      , ev.ua__useragent_major\n      , ev.ua__useragent_minor\n      , ev.ua__useragent_patch\n      , ev.ua__useragent_version\n      , ev.ua__os_family\n      , ev.ua__os_major\n      , ev.ua__os_minor\n      , ev.ua__os_patch\n      , ev.ua__os_patch_minor\n      , ev.ua__os_version\n      , ev.ua__device_family\n\n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    from `com-snplow-sales-gcp`.`scratch`.`snowplow_unified_events_this_run` as ev\n\n    left join `com-snplow-sales-gcp`.`scratch_snowplow_manifest`.`snowplow_unified_dim_ga4_source_categories` c on lower(trim(ev.mkt_source)) = lower(c.source)\n\n    where ev.event_name in ('page_view', 'screen_view')\n    and ev.view_id is not null\n\n    \n      \n  and not regexp_contains(ev.useragent, '(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|(browser|screen)shots|analyz|index|thumb|check|facebook|PingdomBot|PhantomJS|YandexBot|Twitterbot|a_archiver|facebookexternalhit|Bingbot|BingPreview|Googlebot|Baiduspider|360(Spider|User-agent)|semalt)')\n\n    \n\n    \n      qualify row_number() over (partition by ev.view_id order by ev.derived_tstamp, ev.dvce_created_tstamp) = 1\n    \n)\n\n, view_events as (\n  select\n\n    p.*\n\n    , row_number() over (partition by p.session_identifier order by p.derived_tstamp, p.dvce_created_tstamp, p.event_id) AS view_in_session_index\n\n    , coalesce(t.end_tstamp, p.derived_tstamp) as end_tstamp -- only page views with pings will have a row in table t\n\n    \n      , coalesce(t.engaged_time_in_s, 0) as engaged_time_in_s -- where there are no pings, engaged time is 0.\n      , \n\n    datetime_diff(\n        cast(coalesce(t.end_tstamp, p.derived_tstamp) as datetime),\n        cast(p.derived_tstamp as datetime),\n        second\n    )\n\n   as absolute_time_in_s\n      , sd.hmax as horizontal_pixels_scrolled\n      , sd.vmax as vertical_pixels_scrolled\n      , sd.relative_hmax as horizontal_percentage_scrolled\n      , sd.relative_vmax as vertical_percentage_scrolled\n    \n\n    , \n    current_timestamp()\n as model_tstamp\n\n  from prep p\n\n  left join `com-snplow-sales-gcp`.`scratch`.`snowplow_unified_pv_engaged_time` t\n  on p.view_id = t.view_id and p.session_identifier = t.session_identifier\n\n  left join `com-snplow-sales-gcp`.`scratch`.`snowplow_unified_pv_scroll_depth` sd\n  on p.view_id = sd.view_id and p.session_identifier = sd.session_identifier\n\n  \n\n)\n\nselect\n\n    -- event categorization fields\n    pve.view_id\n    , pve.event_name\n    , pve.event_id\n    , pve.session_identifier\n    , pve.view_in_session_index\n    , max(pve.view_in_session_index) over (partition by pve.session_identifier) as views_in_session\n    \n      , pve.session__previous_session_id\n    \n\n    -- user id fields\n    , pve.user_id\n    , pve.user_identifier\n    , pve.stitched_user_id\n    , pve.network_userid\n\n    -- timestamp fields\n    , pve.dvce_created_tstamp\n    , pve.collector_tstamp\n    , pve.derived_tstamp\n    , pve.derived_tstamp as start_tstamp\n    , pve.end_tstamp -- only page views with pings will have a row in table t\n    , pve.model_tstamp\n\n    -- device fields\n    , pve.app_id\n    , pve.platform\n    , pve.device_identifier\n    , pve.device_category\n    , pve.device_session_index\n    , pve.os_version\n    , pve.os_type\n    \n    \n      , pve.os_timezone\n    \n    , pve.screen_resolution\n    \n      , pve.yauaa__device_class\n      , pve.yauaa__device_version\n      , pve.yauaa__operating_system_version\n      , pve.yauaa__operating_system_class\n      , pve.yauaa__operating_system_name\n      , pve.yauaa__operating_system_name_version\n    \n\n    -- geo fields\n    , pve.geo_country\n    , pve.geo_region\n    , pve.geo_region_name\n    , pve.geo_city\n    , pve.geo_zipcode\n    , pve.geo_latitude\n    , pve.geo_longitude\n    , pve.geo_timezone\n    , pve.user_ipaddress\n\n    -- engagement fields\n    \n      , pve.engaged_time_in_s -- where there are no pings, engaged time is 0.\n      , pve.absolute_time_in_s\n      , pve.horizontal_pixels_scrolled\n      , pve.vertical_pixels_scrolled\n      , pve.horizontal_percentage_scrolled\n      , pve.vertical_percentage_scrolled\n    \n\n    -- marketing fields\n    , pve.mkt_medium\n    , pve.mkt_source\n    , pve.mkt_term\n    , pve.mkt_content\n    , pve.mkt_campaign\n    , pve.mkt_clickid\n    , pve.mkt_network\n    , pve.default_channel_group\n\n    -- webpage / referer / browser fields\n    , pve.page_url\n    , pve.page_referrer\n    , pve.refr_medium\n    , pve.refr_source\n    , pve.refr_term\n\n    \n\n      , pve.page_title\n      , pve.content_group\n\n      , pve.page_urlscheme\n      , pve.page_urlhost\n      , pve.page_urlpath\n      , pve.page_urlquery\n      , pve.page_urlfragment\n\n      , pve.refr_urlscheme\n      , pve.refr_urlhost\n      , pve.refr_urlpath\n      , pve.refr_urlquery\n      , pve.refr_urlfragment\n\n\n      , pve.br_lang\n      , pve.br_viewwidth\n      , pve.br_viewheight\n      , pve.br_colordepth\n      , pve.br_renderengine\n\n      , pve.doc_width\n      , pve.doc_height\n\n    \n\n    -- iab enrichment fields\n    \n      , pve.iab__category\n      , pve.iab__primary_impact\n      , pve.iab__reason\n      , pve.iab__spider_or_robot\n    \n\n    -- yauaa enrichment fields\n    \n      , pve.yauaa__device_name\n      , pve.yauaa__agent_class\n      , pve.yauaa__agent_name\n      , pve.yauaa__agent_name_version\n      , pve.yauaa__agent_name_version_major\n      , pve.yauaa__agent_version\n      , pve.yauaa__agent_version_major\n      , pve.yauaa__layout_engine_class\n      , pve.yauaa__layout_engine_name\n      , pve.yauaa__layout_engine_name_version\n      , pve.yauaa__layout_engine_name_version_major\n      , pve.yauaa__layout_engine_version\n      , pve.yauaa__layout_engine_version_major\n    \n\n    -- ua parser enrichment fields\n    \n      , pve.ua__device_family\n      , pve.ua__os_version\n      , pve.ua__os_major\n      , pve.ua__os_minor\n      , pve.ua__os_patch\n      , pve.ua__os_patch_minor\n      , pve.ua__useragent_family\n      , pve.ua__useragent_major\n      , pve.ua__useragent_minor\n      , pve.ua__useragent_patch\n      , pve.ua__useragent_version\n    \n\n    -- mobile only\n    \n      , pve.screen_view__name\n      , pve.screen_view__previous_id\n      , pve.screen_view__previous_name\n      , pve.screen_view__previous_type\n      , pve.screen_view__transition_type\n      , pve.screen_view__type\n    \n\n    \n\n    \n\n    \n\n    , pve.useragent\n\nfrom view_events pve", "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_views_this_run`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_sessions", "compiled": false, "compiled_code": null, "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_sessions`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_views", "compiled": false, "compiled_code": null, "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_views`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_users_sessions_this_run", "compiled": false, "compiled_code": null, "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_users_sessions_this_run`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_users_aggs", "compiled": false, "compiled_code": null, "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_users_aggs`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_users_lasts", "compiled": false, "compiled_code": null, "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_users_lasts`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_users_this_run", "compiled": false, "compiled_code": null, "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_users_this_run`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_unified.snowplow_unified_users", "compiled": false, "compiled_code": null, "relation_name": "`com-snplow-sales-gcp`.`scratch`.`snowplow_unified_users`"}], "elapsed_time": 38.78561997413635, "args": {"macro_debugging": false, "print": true, "favor_state": false, "strict_mode": false, "cache_selected_only": false, "populate_cache": true, "static_parser": true, "version_check": true, "defer": false, "partial_parse": true, "log_format": "default", "show_resource_report": false, "invocation_command": "dbt run --full-refresh", "write_json": true, "use_colors_file": true, "project_dir": "/Users/trentkalisch-smith/manualDBT/snowplow_unified/dbt", "introspect": true, "log_path": "/Users/trentkalisch-smith/manualDBT/snowplow_unified/dbt/logs", "printer_width": 80, "log_file_max_bytes": 10485760, "select": [], "partial_parse_file_diff": true, "log_level_file": "debug", "profiles_dir": "/Users/trentkalisch-smith/manualDBT/snowplow_unified/dbt", "vars": {}, "enable_legacy_logger": false, "warn_error_options": {"include": [], "exclude": []}, "full_refresh": true, "quiet": false, "which": "run", "indirect_selection": "eager", "send_anonymous_usage_stats": true, "use_colors": true, "exclude": [], "log_format_file": "debug", "log_level": "info"}}